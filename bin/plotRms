#!/usr/bin/perl
use warnings;
use strict;

use File::Basename;
use Getopt::Long;
use IPC::Open3;
use IO::Select;
use Symbol 'gensym';

my $tempDir = '/tmp';
my $minRms     = -36;
my $resolution = 1.5;
my $template   = undef;
my $help       = undef;
my $verbose    = undef;
my $imageFile  = undef;
my $audioFile  = undef;

sub error {
    print "ERROR: " . $_[0] . "\n";
    exit 1;
}

sub execute {
    my (@cmd) = @_;
    my $pid = open3(undef, my $out, my $err = gensym, @cmd);
    my $s = IO::Select->new();
    $s->add($out);
    $s->add($err);
    while( my @ready = $s->can_read ) {
        for my $fh (@ready) {
            print ((<$fh> // ''));
            $s->remove($fh) if eof($fh);
        }
    }
    close $err or die $!;
    close $out or die $!;
    waitpid $pid, 0;
    my $exitCode = $? >> 8;
    if ($exitCode != 0){
        error qq{"@cmd" returned with exit code $exitCode};
    }
    return $exitCode;
}

sub getData {
    my ($audioFile, $rmsFile) = @_;

    unlink $rmsFile if -e $rmsFile;
    my @cmd = (
        'nice', 'rms',
        '-r' ,$resolution,
        '-i', $audioFile,
        '-o', $rmsFile);
    push @cmd, '-v' if defined $verbose;
    execute @cmd;
}

sub buildDataFile {
    my ($rmsFile, $dataFile) = @_;

    unlink $dataFile if -e $dataFile;

    open my $file, "<", $rmsFile;
    open my $out,  ">", $dataFile;

    while (<$file>) {
        my $line = $_;
        my @vals = split( /\s+/, $line );
        if ( $line =~ /^#/ ) {
            print $out $line;
            next;
        }
        next unless @vals == 5;
        for my $i ( 1 .. scalar(@vals) - 1 ) {
            my $val = $vals[$i];

            # silence detection
            if ( $val < -200 ) {
                $vals[$i] = '-';
                next;
            }

            # cut off signal lower than minRMS
            $val = -$minRms if $val < -$minRms;

            # get absolute value
            $val = abs($val);

            # inverse value for plot (60db-val= plotVal)
            $val = $minRms - $val;
            $vals[$i] = $val;
        }
        print $out join( " ", @vals ) . "\n";
    }
    close $file;
    close $out;
}

sub plot {
    my $dataFile = shift;
    my $plotFile = shift;

    unlink $plotFile  if -e $plotFile;
    unlink $imageFile if -e $imageFile;

    unless ( defined $template ) {
        my @ytics = ();
        for ( my $i = -$minRms ; $i <= $minRms ; $i += 6 ) {
            push @ytics, '"-' . ( $minRms - abs($i) ) . ' dB" ' . ($i);
        }
        my $ytics = join( ", ", @ytics );

        my $terminals = {
            'svg' => q{set terminal svg size 900,300 background rgb 'black'},
            'png' => q{set terminal png background rgb 'black' truecolor nocrop enhanced size 900,300 font "Droid Sans,8"}
        };

        my $terminal = $terminals->{png};
        $terminal = $terminals->{svg} if $imageFile =~ /\.svg$/;

        my $plot = qq{
            $terminal 
            set output "$imageFile";

            set border lc rgb '#f0f0f0'
            set xtics textcolor rgb '#f0f0f0'
            set ytics textcolor rgb '#f0f0f0'

            set style fill transparent solid 0.3
            set style data lines

            set nokey
            set grid
            set ytics ($ytics)
            set yrange [-$minRms:$minRms]

            set xdata time
            set timefmt "%s"
            set format x "%H:%M:%S"

            plot \\
            '$dataFile' using 1:( (\$4)) lc rgb "#50ee9999" w filledcurves y1=0 title "maxL",\\
            '$dataFile' using 1:(-(\$5)) lc rgb "#5099ee99" w filledcurves y1=0 title "maxR",\\
            '$dataFile' using 1:( (\$2)) lc rgb "#50ff0000" w filledcurves y1=0 title "rmsL",\\
            '$dataFile' using 1:(-(\$3)) lc rgb "#5000ff00" w filledcurves y1=0 title "rmsR"\\
            ;
        };

        open my $file, ">", $plotFile || die("cannot write plot file $plotFile");
        print $file $plot;
        close $file;
    }

    my @cmd = ("gnuplot", $plotFile);
    @cmd = ("gnuplot", $template) if defined $template;

    execute @cmd;
    my $exitCode = $? >> 8;
    error("plot command died with error $exitCode: $!") if $exitCode != 0;
}

sub usage {
    print STDERR q{
plot stereo audio peak and RMS. 

DESCRIPTION:
plotRms will parse audio input file and plot its peak and RMS values.
The left channel will be shown top, the right channel bottom. 
SVG is scalable but larger, on putting many small plots on a page PNG is faster.
The measure window can be set by --resolution <window> [seconds].

Usage: rms [OPTION...] audioFile

OPTIONS:
    -i --input  audio       path of any audio or video file to be plotted
    -o --output image       path of target PNG or SVG file, if ommited use audioFile.png
    -r --resolution VALUE   RMS window in seconds, default is 1.5
    -l --limit              cut off values lower than limit in dB, default is -36
    -t --template FILE      use given gnuplot template file instead of build-in template
    -v --verbose            verbose output
    -h --help               this help

Examples: 
# plot png file from wav
plotRms -i audio.wav -o audio.png

# plot svg file from mp3
plotRms -i audio.mp3 -o audio.svg

};
}

Getopt::Long::GetOptions(
    "i|input=s"      => \$audioFile,
    "o|output=s"     => \$imageFile,
    "r|resolution=s" => \$resolution,
    "t|template=s"   => \$template,
    "l|limit=i"      => \$minRms,
    "h|help"         => \$help,
    "v|verbose"      => \$verbose
) or error("Error in command line arguments\n");

if ($help) {
    usage();
    exit();
}
error("missing parameter --input for audio file") unless defined $audioFile;
error("audio file '$audioFile' does not exist")   unless -e $audioFile;
error("template file '$template' does not exist") if ( defined $template ) && ( !-e $template );
error("invalid resolution '$resolution'")         if $resolution <= 0;

$imageFile   = dirname($audioFile) . '/' . basename($audioFile) . '.png' unless defined $imageFile;
my $tmp      = basename($audioFile) =~ s/[^a-z0-9A-Z]/_/gr;
my $dataFile = qq{$tempDir/$tmp-plot.data};
my $rmsFile  = qq{$tempDir/$tmp-plot.rms};
my $plotFile = qq{$tempDir/$tmp.plot'};

END {
    unlink $dataFile if defined $dataFile  and -e $dataFile;
    unlink $rmsFile  if defined $rmsFile   and -e $rmsFile;
    unlink $plotFile if defined $plotFile  and -e $plotFile;
}

# use the positive value internally
$minRms *= -1 if $minRms < 0;

getData( $audioFile, $rmsFile );
buildDataFile( $rmsFile, $dataFile );
plot( $dataFile, $plotFile );
